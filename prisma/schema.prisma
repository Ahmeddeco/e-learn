generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../generated/zod"
  useMultipleFiles                 = true
  writeNullishInModelTypes         = true
  createModelTypes                 = true // default is true
  writeBarrelFiles                 = false // default is true
  createInputTypes                 = false // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is true
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = false // default is true
  coerceDate                       = false // default is true
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  courses       Course[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

enum Level {
  beginner
  intermediate
  advanced
}

enum Status {
  draft
  published
  archived
}

enum CourseCategories {
  development
  business
  finance
  software
  productivity
  design
  marketing
  health
  music
  teaching
  academics
}

model Course {
  id               String           @id @default(uuid())
  title            String
  smallDescription String
  description      String
  fileKey          String
  price            Int
  duration         Int
  level            Level            @default(beginner)
  category         CourseCategories
  slug             String           @unique
  status           Status           @default(draft)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  User             User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String?
}
